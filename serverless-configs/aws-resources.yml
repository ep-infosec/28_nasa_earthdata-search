Resources:
  # SQS Queue to process Color Map entries
  ColorMapsProcessingQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 300
      ReceiveMessageWaitTimeSeconds: 20

  TagProcessingQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 300
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - TagProcessingDeadLetterQueue
            - Arn
        maxReceiveCount: 2 # Number of times a message will be tried before being dumped to the DLQ

  TagProcessingDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:custom.siteName}-TagProcessingDeadLetterQueue
      MessageRetentionPeriod: 1209600

  LegacyServicesOrderQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 600
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - LegacyServicesOrderDeadLetterQueue
            - Arn
        maxReceiveCount: 2 # Number of times a message will be tried before being dumped to the DLQ

  LegacyServicesOrderDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:custom.siteName}-LegacyServicesOrderDeadLetterQueue
      MessageRetentionPeriod: 1209600

  CatalogRestOrderQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 600 # Give orders a full day to complete
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - CatalogRestOrderDeadLetterQueue
            - Arn
        maxReceiveCount: 2 # Number of times a message will be tried before being dumped to the DLQ

  CatalogRestOrderDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:custom.siteName}-CatalogRestOrderDeadLetterQueue
      MessageRetentionPeriod: 1209600

  HarmonyOrderQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 600 # Give orders a full day to complete
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - HarmonyOrderDeadLetterQueue
            - Arn
        maxReceiveCount: 2 # Number of times a message will be tried before being dumped to the DLQ

  HarmonyOrderDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:custom.siteName}-HarmonyOrderDeadLetterQueue
      MessageRetentionPeriod: 1209600

  OptionDefinitionsQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 3600
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - OptionDefinitionDeadLetterQueue
            - Arn
        maxReceiveCount: 2 # Number of times a message will be tried before being dumped to the DLQ

  OrderStatusQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 300

  OptionDefinitionDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:custom.siteName}-OptionDefinitionDeadLetterQueue
      MessageRetentionPeriod: 1209600

  UserDataQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - UserDataQueueDeadLetterQueue
            - Arn
        maxReceiveCount: 2 # Number of times a message will be tried before being dumped to the DLQ

  UserDataQueueDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:custom.siteName}-UserDataQueueDeadLetterQueue
      MessageRetentionPeriod: 1209600

  GatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId:
        Ref: ApiGatewayRestApi

  GatewayResponseDefault5XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_5XX
      RestApiId:
        Ref: ApiGatewayRestApi

  # This role must not be changed -- if it is removed Serverless will attempt to automatically
  # recreate it and deployments will fail because our permissions boundary does not allow for
  # creation of roles. This role is used specifically for S3 Lambda triggers that use existing
  # buckets, which is what we're using for forwarding cloudfront logs to Splunk.
  IamRoleCustomResourcesLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      PermissionsBoundary:
        Fn::Join: [
          "", [
            "arn:aws:iam::",
            {
              "Ref": "AWS::AccountId"
            },
            ":policy/NGAPShRoleBoundary"
          ]
        ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole

  S3CloudfrontLogToCloudwatchPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Action:
              - "s3:GetBucketLocation"
              - "s3:ListBucket"
              - "s3:ListAllMyBuckets"
              - "s3:GetObject"
            Effect: "Allow"
            Resource: "*"
      PolicyName: ${self:provider.stage}-S3CloudfrontLogToCloudwatchPolicy
      Roles:
        - Ref: IamRoleCustomResourcesLambdaExecution
Outputs:
  UpdateOrderStatusWorkflow:
    Description: ARN of the order status step function workflow
    Value:
      Ref: UpdateOrderStatusWorkflowDash${self:provider.stage}
